#MIN_CONFIG(3)

AM_INIT_AUTOMAKE(digikam,0.8.0)

# -----------------------------------------------------------------
# enable hidden visibility only if kde >= 3.3.2 and kdelibs has
# been compiled with visibility enabled
# -----------------------------------------------------------------

AC_LANG_PUSH(C++)
digikam_save_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $all_includes"  
AC_MSG_CHECKING([if hidden visibility should be enabled])
AC_COMPILE_IFELSE(
 [
   #include <kdeversion.h>
   #include <kdemacros.h>
   int other_func( void )
   { 
      #if KDE_IS_VERSION(3,3,2)
      #else
        iam dying;
      #endif
      #ifdef __KDE_HAVE_GCC_VISIBILITY
      #else
        no, iam really dead;
      #endif      
      return 0;
   }
 ], 
 [ AC_MSG_RESULT([yes])
   digikam_enable_hidden_visibility="yes" ],
 [ AC_MSG_RESULT([no]) ] 
)
CPPFLAGS=$digikam_save_cppflags
AC_LANG_POP(C++)

if test "x$digikam_enable_hidden_visibility" = "xyes"; then
   KDE_ENABLE_HIDDEN_VISIBILITY 
fi

# -----------------------------------------------------------------
# pkg config check
# -----------------------------------------------------------------

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

# -----------------------------------------------------------------
# sqlite2 type check
# -----------------------------------------------------------------
KDE_CHECK_TYPES

# -------------------------------------------------------
# Check endianness
# -------------------------------------------------------
AC_LANG_SAVE
AC_LANG_C
AC_C_BIGENDIAN
AC_LANG_RESTORE

# -----------------------------------------------------------------
# sqlite3 check
# -----------------------------------------------------------------

LIB_SQLITE3=""

if test x$PKGCONFIGFOUND = xyes; then
   PKG_CHECK_MODULES(SQLITE, sqlite3 >= 3.0, have_sqlite3=yes,have_sqlite3=no)

   if test x$have_sqlite3 = xyes; then
      LIB_SQLITE3=`pkg-config --libs sqlite3`
   else
      DO_NOT_COMPILE="$DO_NOT_COMPILE digikam digikamimageplugins"
   fi
fi

AC_SUBST(LIB_SQLITE3)

# -----------------------------------------------------------------
# lcms check
# -----------------------------------------------------------------

have_lcms_header='no'
KDE_CHECK_HEADER(lcms/lcms.h,have_lcms_header='yes',,)
if test "$have_lcms_header" = 'yes'
then
    AC_DEFINE(LCMS_HEADER, <lcms/lcms.h>, [The correct header])
else
    # Alternative! Debian does it this way...
    KDE_CHECK_HEADER(lcms.h,have_lcms_header='yes',,)
    if test "$have_lcms_header" = 'yes'
    then
        AC_DEFINE(LCMS_HEADER, <lcms.h>, [The correct header])
    fi
fi

LCMS_LIBS=''
have_lcms='no'
if test "$have_lcms_header" = 'yes'
then
    saved_libs=$LIBS
    LIBS="$LIBS -llcms"
    AC_TRY_LINK([
#define inline __inline /* gcc is in ansi mode */
#include LCMS_HEADER
#if LCMS_VERSION < 112
choke!
#endif
], [
cmsOpenProfileFromFile("foo", "r");
],
        [LCMS_LIBS='-llcms'; have_lcms='yes'])
    LIBS=$saved_libs
fi

if test -z "$LCMS_LIBS"; then
    DO_NOT_COMPILE="$DO_NOT_COMPILE digikam digikamimageplugins"
fi

AC_SUBST(LCMS_LIBS)


# -------------------------------------------------------
# Check endianness
# -------------------------------------------------------
AC_LANG_SAVE
AC_LANG_C
AC_C_BIGENDIAN
AC_LANG_RESTORE

#---------------------------------------------------------
# imlib2-detection
#---------------------------------------------------------

AC_DEFUN([KDE_FIND_IMLIB2_CONFIG],
   [AC_MSG_CHECKING([for imlib2-config])

imlib2_config_given=NO
ac_imlib2_config=""

AC_ARG_WITH(imlib2-config,
        [  --with-imlib2-config     directory where \"imlib2-config\" lies ],
        [  ac_imlib2_config="$withval/imlib2-config"
           imlib2_config_given=yes
        ])

if test "$imlib2_config_given" = "yes"; then
  if test ! -r $ac_imlib2_config; then
    AC_MSG_RESULT(wrong file specified)
    ac_imlib2_config=""
  else
    IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
    LIB_IMLIB2=`$ac_imlib2_config --libs`
    AC_SUBST(LIB_IMLIB2)
    AC_SUBST(IMLIB2_CFLAGS)
    AC_MSG_RESULT($ac_imlib2_config)
  fi
else
  ac_imlib2_config=`which imlib2-config 2>/dev/null`
  if test -z "$ac_imlib2_config"; then
    AC_MSG_RESULT(no)
  else
    dummy=`echo "$ac_imlib2_config" | grep '/imlib2-config'`
    if test -z "$dummy"; then
      AC_MSG_RESULT(no)
      ac_imlib2_config=""
    else
      LIB_IMLIB2=`$ac_imlib2_config --libs`
      IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
      imlib2_config=`echo "$LIB_IMLIB2" | grep lImlib2`
      if test -z "$imlib2_config"; then
        AC_MSG_RESULT(no)
        ac_imlib2_config=""
      else
        AC_SUBST(LIB_IMLIB2)
        AC_SUBST(IMLIB2_CFLAGS)
        AC_MSG_RESULT($ac_imlib2_config)
      fi
    fi
  fi
fi

])

dnl Check if Imlib2 is installed properly
KDE_FIND_IMLIB2_CONFIG
     
if test -z "$ac_imlib2_config"; then
  AC_MSG_WARN([Imlib 2.x not found.])
  DO_NOT_COMPILE="digikam digikamimageplugins $DO_NOT_COMPILE"
fi

#------------------------------------------------------------------
# gphoto2 detection
#------------------------------------------------------------------

dnl Check for gPhoto2 configuration

AC_PATH_PROG(GPHOTO_CONFIG,gphoto2-config)
AC_PATH_PROG(GPHOTO_PORT_CONFIG,gphoto2-port-config)
if test -n "${GPHOTO_CONFIG}"; then
  GPHOTO_CFLAGS="`$GPHOTO_CONFIG --cflags`"
  AC_SUBST(GPHOTO_CFLAGS)
  LIB_GPHOTO="`$GPHOTO_CONFIG --libs` `$GPHOTO_PORT_CONFIG --libs`"
  AC_SUBST(LIB_GPHOTO)
else
  AC_MSG_WARN([gPhoto2 not found.])
  DO_NOT_COMPILE="digikam digikamimageplugins $DO_NOT_COMPILE"
fi

CXXFLAGS="$CXXFLAGS -DQT_CLEAN_NAMESPACE"

#------------------------------------------------------------------
# KIPI support (KDE Image Plugin Interface) 
#------------------------------------------------------------------

if test "$PKGCONFIGFOUND" = "yes" ; then
   # check for libkipi
   have_libkipi=no

   KDE_PKG_CHECK_MODULES(LIBKIPI, libkipi >= 0.1,
	 	         have_libkipi=yes, have_libkipi=no)

   if test "x$have_libkipi" = "xno"; then
	LIBKIPI_CFLAGS=""
	LIBKIPI_LIBS=""
        AC_MSG_RESULT([not found])
   else
	AC_MSG_RESULT([found])
   fi
else
   LIBKIPI_CFLAGS=""
   LIBKIPI_LIBS=""
   AC_MSG_RESULT([not found])
fi 
AC_SUBST(LIBKIPI_CFLAGS)
AC_SUBST(LIBKIPI_LIBS)

if test "x$have_libkipi" != "xyes"; then
     DO_NOT_COMPILE="$DO_NOT_COMPILE digikam digikamimageplugins"
fi

#------------------------------------------------------------------
# Check for libkexif
#------------------------------------------------------------------


if test "$PKGCONFIGFOUND" = "yes" ; then
   # check for libkexif
   have_libkexif=no

  KDE_PKG_CHECK_MODULES(LIBKEXIF, libkexif >= 0.2,
   	                have_libkexif=yes, have_libkexif=no)

  if test "x$have_libkexif" = "xno"; then
       LIBKEXIF_CFLAGS=""
       LIBKEXIF_LIBS=""
       AC_MSG_RESULT([not found])
  else
       AC_MSG_RESULT([found])
  fi
else
   LIBKEXIF_CFLAGS=""
   LIBKEXIF_LIBS=""
   AC_MSG_RESULT([not found])
fi 
AC_SUBST(LIBKEXIF_CFLAGS)
AC_SUBST(LIBKEXIF_LIBS)

if test "x$have_libkexif" != "xyes"; then
   DO_NOT_COMPILE="$DO_NOT_COMPILE digikam digikamimageplugins"
fi

#------------------------------------------------------------------
# Check for libtiff
#------------------------------------------------------------------

have_tiff=no
KDE_CHECK_LIB(tiff, TIFFWriteScanline,
  have_tiff=yes,
  AC_MSG_WARN([TIFF library not found]), 
  -ljpeg -lz -lm)

if test "x$have_tiff" = "xyes"; then
  KDE_CHECK_HEADER(tiffio.h, have_tiff=yes, have_tiff=no)
fi

if test "x$have_tiff" != "xyes"; then
  AC_WARN([TIFF library not found, digiKam will not be compiled.])
  DO_NOT_COMPILE="digikam digikamimageplugins $DO_NOT_COMPILE"
else
  LIB_TIFF="-ltiff"
  AC_SUBST(LIB_TIFF)
fi

#------------------------------------------------------------------
# Check for libpng with png_set_add_alpha() function
#------------------------------------------------------------------

have_png=no
KDE_CHECK_LIB(png, png_set_add_alpha,
        have_png=yes,
        AC_MSG_WARN([digiKam requires libpng >= 1.2.7]),
        -lpng -lz -lm)

if test "x$have_png" != "xyes"; then
  AC_WARN([digiKam requires libpng >= 1.2.7; digiKam will not be compiled.])
  DO_NOT_COMPILE="digikam digikamimageplugins $DO_NOT_COMPILE"
fi  

#------------------------------------------------------------------
# NFS is Evil (sqlite makes use of file locking for allowing 
# multiple processes to access the database. but on many 
# nfs implementations, this file locking is horribly broken and
# can end up locking the app or not allowing access to the app. 
# since we use kioslaves which access the db too)
#------------------------------------------------------------------

AC_ARG_ENABLE(nfs-hack,
	AC_HELP_STRING([--enable-nfs-hack],
[Enable a hack for album libraries on a nfs mount, 
 which causes the database to be saved in 
 $HOMEDIR/.kde/share/apps/digikam/directoryname.db [default=disable]]),
 [enable_nfs_hack=$enableval],
 [enable_nfs_hack=no]
)

if test "x$enable_nfs_hack" == "xyes"; then
   AC_DEFINE(NFS_HACK, 1, [NFS hack enabled])
   AC_MSG_NOTICE([NFS hack enabled. Make sure you know what you are doing])
fi


