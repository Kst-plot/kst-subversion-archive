<chapter id="data">
<title>Working With Data</title>

<sect1 id="data-overview">
<title>Data Objects Overview</title>

<sect2 id="data-overview-concepts">
<title>Data Object Concepts</title>
<para>
We will call Data Objects in &kst; all objects which appear in the <link linkend="data-overview-datamanager">Data Manager</link>. There are ten main kinds of data object in &kst;. The following diagram illustrates the relationships between the different types:
</para>

<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Diagram-kst-data-datatypes.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>&kst; Data Types</phrase>
</textobject>
</inlinemediaobject>
</para>

<para>
As can be seen in the diagram, the only truly 'plottable' data objects are curves and images. Many data objects contain slave vectors which can be plotted using curves, however- so these data objects are effectively plottable as well.
</para>

<para>
The usefullness of the Data Objects concept in &kst; is that they can be tied together to create pipelines. An Event Monitor object, for instance, can take the output of another object as its input. Updates to objects in the pipeline propagate automatically. This is one of the key features which makes &kst; powerful for realtime plotting.
</para>
</sect2>

<sect2 id="data-overview-datamanager">
<title>The Data Manager</title>
<para>
The Data Manager provides a central location for adding, deleting, and modifying all the data objects used in &kst;. It can be accessed by selecting <guimenuitem>Data Manager</guimenuitem> from the <guimenu>Data</guimenu> menu.
</para>

<screenshot>
<screeninfo>The Data Manager</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-datamanager.png" format="PNG" />
</imageobject>
<textobject>
<phrase>The Data Manager</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
The panel on the left side of the Data Manager can be used to quickly create new data objects. The <guibutton>Purge</guibutton> button automatically deletes Data Objects which are not <link linkend="data-overview-datamanager-used">Used</link> Data Objects. The <guibutton>Edit</guibutton> and <guibutton>Delete</guibutton> buttons allow you to selectively edit or remove particular objects. The <guibutton>Close</guibutton> exits the Data Manager. 
</para>

<tip><para>You can also create new data objects which are based on vectors by right clicking on the corresponding vector and choosing one of the <guimenuitem>Make ...</guimenuitem> options. If you select a curve, on the other hand, then you have the option to add it to an existing plot.</para></tip>

<para>
For its list of Data Objects, the Data Manager displays several pieces of information. These are described below:
</para>

<variablelist>
<varlistentry>
<term>
<guilabel>Name</guilabel>
</term>
<listitem>
<para>
The name of the data object, unique among the set of data objects with the same type.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Type</guilabel>
</term>
<listitem>
<para>
The type of the data object determines how it is created and what its options are. Type can be: Data Vector, Curve, Equation, Histogram, Spectrum, Plugin, Event Monitor, Matrix, Image, or Spectrogram.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term id="data-overview-datamanager-used">
<guilabel>Used</guilabel>
</term>
<listitem>
<para>
This field gives the status of the data object. If there is a check mark in the Used column of a data object then some other object in &kst; is dependent on it.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Samples</guilabel>
</term>
<listitem>
<para>
The number of elements in the data object.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Properties</guilabel>
</term>
<listitem>
<para>
A summary of the data object's key parameters, dependent on its <link linkend="data-types">type</link>.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="data-overview-creatingdeleting">
<title>Creating and Deleting Data Objects</title>
<para>
You can create new Data Objects using either the left panel in the <link linkend="data-overview-datamanager">Data Manager</link>, or the <guimenu>Data</guimenu> menu.
</para>

<para>
When you are creating a new data object, you may enter a unique name to identify the object.  If you do not enter a custom name then a unique name will be automatically generated.
</para>

<para>
To delete a data object you must use the <link linkend="data-overview-datamanager">Data Manager</link>. Note that if the <guilabel>Used</guilabel> column for a data object has a check-mark then some other data or view object in &kst; has a dependency on it. Depending on the strength of these dependencies, &kst; will prompt before an object is deleted. If, for example, other objects have critical dependencies on the one which you are attempting to delete, &kst; will ask if you would like to delete these other objects as well, to prevent crashes from occuring. Some dependencies are listed below:
</para>

<itemizedlist>
<listitem>
<para>
Plots are not critically dependent on the plottable objects which they contain, so if a plotted object is deleted &kst; will automatically remove it from all plots, without prompting.
</para>
</listitem>

<listitem>
<para>
All data objects which use a particular data vector must be deleted before the data vector itself can be deleted.
</para>
</listitem>

<listitem>
<para>
All children of a parent data object must be unused before the parent data object can be deleted.
</para>
</listitem>
</itemizedlist>

<para>
After a sequence of deletions and removals of plottable data objects from plots, you may find that there are numerous unused data objects displayed in the Data Manager.  To quickly remove these objects, you can click the <guibutton>Purge</guibutton> button.
</para>
</sect2>

</sect1>

<sect1 id="data-types">
<title>Data Types</title>

<sect2 id="data-types-vectors">
<title>Vectors</title>
<para>
Vectors are one of the most often-used data objects in &kst;.  As their name implies, vectors are simply ordered lists of numbers.  Usually they contain the x or y coordinates of a set of data points.
</para>

<para>
As vectors can potentially be quite large, it is a good idea to be aware of the amount of memory &kst; has
allocated for use.  The current available memory is displayed in the lower right corner of the status bar
of the main &kst; window. If the status bar is not available, ensure that <guimenuitem>Show Statusbar</guimenuitem> is checked in the <guimenu>Settings</guimenu> menu.
</para>

<para>
There are two kinds of vector- <link linkend="data-types-vectors-data">data vectors</link> and <link linkend="data-types-vectors-static">static vectors</link>. Data vectors are read into &kst; through a data source. Static vectors, on the other hand, are generated by &kst;. They represent an evenly spaced list of numbers, and can be useful e.g. for generating an x-axis for a plot.
</para>

<sect3 id="data-types-vectors-data">
<title>Data Vectors</title>
<para>
The following is a screenshot of the window displayed when editing data vectors. A new data vector is created if you choose the <guibutton>Read from data source</guibutton> radio button in the New Vector dialog. Explanations of the settings are listed below.
</para>

<screenshot>
<screeninfo>Edit Vectors</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-vectoredit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Vectors</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>
<varlistentry>
<term>
<guilabel>File name</guilabel>
</term>
<listitem>
<para>
The path to the desired data file.  Clicking the button to the right displays a file browser
window that can be used to graphically browse for the file.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Field or column</guilabel>
</term>
<listitem>
<para>
The field or column to use for the vector.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Start frame</guilabel>, <guilabel>Count from end</guilabel>,
<guilabel>Range</guilabel>, and <guilabel>Read to end</guilabel>
</term>
<listitem>
<para>
This section specifies the range of data to use from the selected field for the data vector. This discussion assumes a knowledge of the <link linkend="data-sources-concepts-frames">Frames</link> concept. Using these four settings, the lower and upper boundaries of the data range can be set. For example, to read from frame 10 to frame 900, enter <userinput>10</userinput> for <guilabel>Start frame</guilabel> and <userinput>890</userinput> for <guilabel>Range</guilabel>. To read from frame 500 to the end of the file, enter <userinput>500</userinput> for <guilabel>Start frame</guilabel> and select the <guilabel>Read to end</guilabel> option. To read only the last 450 frames from the file, select the <guilabel>Count from end</guilabel> option and enter <userinput>450</userinput> for <guilabel>Range</guilabel>. The combinations used in the previous two examples are often useful for reading data from a file that is being updated in real time. Subsequent additions to the file are read, causing associated vectors to be updated as well.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>Read 1 sample per</guilabel> and <guilabel>Boxcar filter first</guilabel>
</term>
<listitem>
<para>
In addition to the lower and upper range boundaries, the samples to read from the selected range can be set.
If <guilabel>Read 1 sample per</guilabel> is not selected, all samples in the selected range will be read.
If <guilabel>Read 1 sample per</guilabel> is selected, only 1 sample per <literal>N</literal> frames will be read, where <literal>N</literal> is the number entered in selection box to the right.
The value of the 1 sample that is used to represent a frame depends on whether or not
<guilabel>Boxcar filter first</guilabel> is selected.  If <guilabel>Boxcar filter first</guilabel> is not selected, the value is the same as the value of the 1st sample in the frame. If <guilabel>Boxcar filter first</guilabel> is selected, the value is the average of all the samples in that particular frame.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="data-types-vectors-static">
<title>Static Vectors</title>
<para>
The following is a screenshot of the window displayed when editing static vectors. A new static vector is created if you choose the <guibutton>Generate</guibutton> radio button in the New Vector dialog. Explanations of the settings for static vectors are listed below.
</para>

<screenshot>
<screeninfo>Edit Static Vectors</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-staticvectoredit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Vectors</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
The entries of the vector will be From + (To - From)/(#samples - 1)*(i-1) for i = 1,...,#samples.
</para>
</sect3>

</sect2>

<sect2 id="data-types-curves">
<title>Curves</title>
<para>
Curves are primarily used to create plottable objects from vectors.  Curves are created from two vectors - an <quote>X axis vector</quote> and a <quote>Y axis vector</quote>, that presumably provide a set of data points.  Thus, a curve can be thought
of as a set of data points and the lines that connect them (even though the points or lines may not be visible on plots).
</para>
<para>
The following is a screenshot of the window displayed when creating or editing curves.  Explanations of the
settings are listed below.
</para>

<screenshot>
<screeninfo>Edit Curves</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-curveedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Curves</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>

<varlistentry>
<term>
<guilabel>Legend Text</guilabel>
</term>
<listitem>
<para>
The string to be used in Plot Legends to describe this curve.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>X axis vector</guilabel>
</term>
<listitem>
<para>
The vector to use for the independent (horizontal) axis.
</para>
</listitem>The following is a screenshot of the histogram specific options when creating or editing histograms. Explanations of the settings are listed below.
</varlistentry>

<varlistentry>
<term>
<guilabel>Y axis vector</guilabel>
</term>
<listitem>
<para>
The vector to use for the dependent (vertical) axis.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilabel>+X error bar</guilabel> and <guilabel>+Y error bar</guilabel>
</term>
<listitem></variablelist>
<para>
The vectors containing error values corresponding to the X axis vector and Y axis vector, respectively.
The vectors should contain the sizes of the error bars in the same order as the data points.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Use +<replaceable>X/Y</replaceable> error bar for
-<replaceable>X/Y</replaceable></guilabel></term> <listitem><para>If
this item is checked, the error bars are drawn symmetrically about the
data point. To draw asymmetric error bars in the x or y direction,
uncheck the box, and choose a vector for the length of the error bar
below the data point in the <guilabel>-<replaceable>X/Y</replaceable>
error bar</guilabel> combo box.</para>
</listitem>
</varlistentry></variablelist>
</sec2>

<varlistentry>
<term><guilabel>-<replaceable>X/Y</replaceable> error
bar</guilabel></term>
<listitem><para>The vector to use for the error bar below the data
point. See the previous entry for more detail on using asymmetric
error bars.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Show Points<guilabel></term>
<listitem><para>Determines whether are not the data points will be indicated by the selected type of marker.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><guilabel>Show Lines / Weight</guilabel></term>
<listitem><para>The color and thickness (in pixels) of the curve.</para>
</listitem>
</varlistentry>




<varlistentry>
<term><guilabel>Density<guilabel></term>
<listitem><para>If Show Points and Show Lines is enabled, Density allows you to have &kst; only show occasional points if they will otherwise clutter the plot.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><guilabel>Bargraph</guilabel></term>
<listitem><para>Draws lines or rectangles from the data points to the bottom of the plot.</para>
</listitem>
</varlistentry>

</variablelist>
</sec2>

<sec2 id="data-types-equations">
<title>Equations</title>
<para>
An equation data object consists of a mathematical expression and an independent variable. The expression is built using a combination of scalars, vectors, and operators, and usually represents the values of the dependent variable. The independent variable is generated from an existing vector, and stored as a slave vector along with the evaluated results of the equation.
</para>
<para>
The following is a screenshot of the window displayed when creating or editing equations. Explanations of the settings are listed below.
</para>

<screenshot>
<screeninfo>Edit Equations</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-equationedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Equations</phrase>
</textobject>
</mediaobject>
</screenshot>


<variablelist>
<varlistentry>
<term>
<guilable>Operators
</guilable>
</term>

<listitem>
<para>
A list of available operators. Choosing an operator from the list inserts the operator at the current insertion point in the Equation text box.
</para>
</listitem>

</varlistentry>


<varlistentry>
<term>
<guilable>Vectors
</guilable>
</term>

<listitem>
<para>
A list of the current vector objects in Kst. Choosing a vector from the list inserts the vector at the current insertion point in the Equation text box.
</para>
</listitem>

</varlistentry>



<varlistentry>
<term>
<guilable>Scalars
</guilable>
</term>

<listitem>
<para>
 
 A list of the available scalar values. This list is composed of both the scalar values in the current Kst session as well as some built-in constants. Choosing a scalar from the list inserts the scalar at the current insertion point in the Equation text box
</para>
</listitem>

</varlistentry>


<varlistentry>
<term>
<guilable>Equations
</guilable>
</term>

<listitem>
<para>
 The mathematical expression representing the independent variable. You may manually type in this text box or you may select items to insert using the above drop-down lists.

</para>
</listitem>

</varlistentry>


<varlistentry>
<term>
<guilable>X Vector
</guilable>
</term>

<listitem>
<para>
Select this option to use an existing vector as the independent variable. Select a vector from the drop-down list, or quickly create a new one by clicking the wizard button to the right.

</para>
</listitem>

</varlistentry>


<varlistentry>
<term>
<guilable>Interpolate to highest resolution vector
</guilable>
</term>

<listitem>
<para>
 
 Selecting this option interpolates the selected X vector to the greatest number of samples possible, given the data used in the equation expression. For example, if the data expression acts on a vector Y which contains twice as many variables as the selected X vector, the equation object will create a slave vector of interpolated X values with the same number of points as Y.

</para>
</listitem>

</varlistentry>




</variablelist>
</sec2>



<sec2 id="data-types-histograms">
<title>Histograms</title>
<para>
This object calculates the histogram of a chosen vector.
</para>
<para>
The following is a screenshot of the histogram specific options when creating or editing histograms. Explanations of the settings are listed below.
</para>

<screenshot>
<screeninfo>Edit Histogram</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-histogramedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Equations</phrase>
</textobject>
</mediaobject>
</screenshot>



<variablelist>
<varlistentry>
<term>
<guilable>Data vector
</guilable>
</term>

<listitem>
<para>
 The data vector to create the histogram from. Although a vector is needed to create a histogram, the vector is treated as an unordered set for the purposes of creating a histogram.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<guilable>Data vector
</guilable>
</term>

<listitem>
<para>
 The data vector to create the histogram from. Although a vector is needed to create a histogram, the vector is treated as an unordered set for the purposes of creating a histogram.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>From and to
</guilable>
</term>

<listitem>
<para>
The From field contains the left bound for the leftmost bin in the histogram. The to field contains the right bound for the rightmost bin in the histogram
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Num bins
</guilable>
</term>

<listitem>
<para>
Enter the total number of bins to use in the Num bins field
</para>
</listitem>
</varlistentry>


<varlistentry>
<term>
<guilable>Auto Bin
</guilable>
</term>

<listitem>
<para>
Instead of specifying values for From, to, and Num bins, you can click Auto Bin to automatically generate values for all three fields based based on the length and lowest/highest values of the chosen the data vector.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Number in bin
</guilable>
</term>

<listitem>
<para>
 
 Selecting this option causes the y axis to represent the number of elements in each bin.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Fraction in bin
</guilable>
</term>

<listitem>
<para>
 
Selecting this option causes the y axis to represent the fraction of elements in each bin out of the total number of elements.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Percent in bin
</guilable>
</term>

<listitem>
<para>
 
Selecting this option causes the y axis to represent the percentage of elements (out of the total number of elements) in each bin.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term>
<guilable>Peak bin=1.0
</guilable>
</term>

<listitem>
<para>
 
Selecting this option causes the y axis to represent the number of elements in each bin divided by the number of elements in the largest bin (the bin with the greatest number of elements).
</para>
</listitem>
</varlistentry>

</variablelist>
</sec2>


<sec2 id="data-type-spectrum">
<title>Spectrum</title>
<para>
The following definitions assume basic knowledge of power spectra— We use the conventions and terminology of "Numerical Recipes in C: The Art of Scientific Computing", published by Cambridge University Press.
</para>

<screenshot>
<screeninfo>Edit Spectrum</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-spectraedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Spectrum</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>

<varlistentry>
<term>
<guilable>Data vector
</guilable>
</term>

<listitem>
<para>
The data vector to create the spectrum from.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Apodize, Function, and Sigma
<guilable>
</guilable>
</term>

<listitem>
<para>
If the Apodize option is selected, the data is windowed using a the function chosen from the drop-down menu at right. Apodization can be used to reduce bin-to-bin leakage. If the Gaussian apodization function is chosen, then a sigma value may also be entered to define its effective width.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Remove Mean
<guilable>
</guilable>
</term>

<listitem>
<para>
Select this option to remove the mean from the data while calculating the transform.
</para>
</listitem>
</varlistentry>

<varlistentry>
<varialblist>

</variablist>
<term>Interleaved average and FFT Length
<guilable>
</guilable>
</term>

<listitem>
<para>
Selecting Interleaved average calculates the FFT over segments of the data, which increases the FFT speed and improves accuracy, at the result of less information about low frequency components. The length of the interleaved segments is specified as a power of 2. If Interleaved average is unchecked, Kst will choose the smallest possible FFT length which is greater than the data vector length.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Interpolate Over Holes
<guilable>
</guilable>
</term>

<listitem>
<para>
 
 If the data vector contains NaN values, then selecting this option will cause Kst to interpolate through them when calculating the power spectrum.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Sample rate
<guilable>
</guilable>
</term>

<listitem>
<para>
 This is the number of data vector samples per unit time. The sample rate is used to generate the X axis of the spectrum for plotting.

</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Vector units and Rate units
<guilable>
</guilable>
</term>

<listitem>
<para>
The units specified in these textboxes are used for the purpose of auto-generating axes labels for the plots.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Output
<guilable>
</guilable>
</term>

<listitem>
<para>
The option selected from this drop-down menu determines which variant of the power spectrum should be computed. The amplitude spectrum is calculated by taking the square root of the power spectrum. Spectral densitites are calculated by multiplying the Power or Amplitude Spectra by the number of data samples divided by the sample rate entered above.
</para>
</listitem>
</varlistentry>


</variablelist>
</sec2>

<sec2 id="data-type-spectrogram">
<title>Spectrogram</title>
<para>
A spectrogram is a way to plot the frequency spectrum of a data vector as a function of position within the data. It allows you to visualize, for example, how the frequency distribution of a signal changes with time. In Kst the spectrogram data object takes a data vector as an input and produces an image object which can be displayed as a 'waterfall' plot. An example is shown in the screenshot below. This is a spectrogram from one day of data from a channel of the WMAP satellite. The size of the intervals over which the component spectra are calculated has been chosen so that each interval corresponds to 1/2 hour of data. The 1h periodic precession of the satellite about its spin axis can be clearly seen. Also, at ~0.007Hz the red lines at the bottom of the image show the much faster (.5rpm) spin frequency of the satellite.
</para>
<screenshot>
<screeninfo>wmap_sampleplots.kst-Kst</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-spectrogramexample.png" format="PNG" />
</imageobject>
<textobject>
<phrase>wmap_sampleplots.kst-Kst</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>Here is the edit dialog for the spectrogram object.</para>
<screenshot>
<screeninfo>Edit Spectrogram</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-spectrogramedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Spectrogram</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>An explanation of the spectorgram specific options is given below:</para>

<varialbelist>

<varlistentry>
<term>
<guilable>Window Size
</guilable>
</term>
<listitem>
<para>
The length of the data over which to take the spectra. The data vector will be subdivided into intervals of this length, and a spectrum will be computed for each one.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>FFT Options
</guilable>
</term>
<listitem>
<para>
These are the options for the individual spectra. See the <link linkend="data-types-spectrum">Spectrum</link> data object for more information.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Color Palette
</guilable>
</term>
<listitem>
<para>
Here you can choose the color scheme to use for the spectrogram. The amplitudes of the spectra are color-coded according to the selected scheme.
</para>
</listitem>
</varlistentry>

</variablelist>

</sec2>

<sec2 id="data-type-plugins">
<title>Plugins</title>
<para>
A plugin data object represents a Kst plugin. All plugins have a common format, and show up as type “Plugin” in the Data Manager. For more information about the available plugins and their options, please see the <link linkend ="plugins">Plugins</link> chapter.
</para>

</sec2>



<sec2 id="data-type-event-monitors">
<title>Event Monitors</title>
<para>
 An event monitor data object essentially keeps track of one or more vectors or scalars, and performs an action when a specified condition involving the vectors and scalars is true. Event monitors are usually used in conjunction with “live”, or streaming data. For example, an event monitor could be created to monitor whether or not elements of a data vector representing temperature exceed a predefined value. 
</para>
<para>
 You can create a new event monitor using the New Event Monitor... item in the Data menu, or by using the <link linkend="data-overview-datamanager"> Data Manager</link>. 
</para>

<para>
 The following is a screenshot of the window displayed when creating or editing events. Explanations of the settings are given below.
</para>

<screenshot>
<screeninfo>New Event Monitor</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-commontasks-creatingeventmonitor-neweventmonitor.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Equations</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>

<varlistentry>
<term>
<guilable>Expression
</guilable>
</term>
<listitem>
<para>
The expression to monitor. You may type directly in this textbox, or select items to insert using the operator, vector, and scalar drop-down lists. Ensure that the expression entered in this textbox is a boolean expression (i.e. it evaluates to either true or false). This usually entails using an equality or inequality in the expression. Note that vectors entered in the textbox will be monitored according to their individual elements.
</para>
<para>
Whenever this expression is true (evaluates to 1), the event will be triggered. The action taken upon an event trigger depends on the settings specified in the next two sections.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Description
</guilable>
</term>
<listitem>
<para>
This textbox is used to store a short description of the event. The description is primarily available as a method for keeping track of multiple events. You can enter any text you wish in this textbox.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Log as:
</guilable>
</term>
<listitem>
<para>
Enable this checkbox to have entries added to the Kst debug log when this event is triggered. There are three types of entries in the debug log—notices, warnings, and errors. Select the desired type of entry using the corresponding radio button.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>E-Mail Notify
</guilable>
</term>
<listitem>
<para>
 Enable this checkbox to have Kst send e-mail notifications to the specified address when this event is triggered. General E-mail configuration options are available in the Kst <link linkend="settings-globalsettings">Settings</link> dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>ELOG
</guilable>
</term>
<listitem>
<para>
 If the <link linkend = "extensions-elog">ELOG Extension</link> is activated, then then Event Monitor can provide notification through ELOG. This can be useful for remotely monitoring live data, or for obtaining summaries of event activity. Please see the <link linkend = "extensions-elog">ELOG</link> section for more information.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>KstScript
</guilable>
</term>
<listitem>
<para>
 If the is activated, then then Event Monitor can provide execute a KstScript when it triggers. Please see the KstScript documentation for more information.
</para>
</listitem>
</varlistentry>

</vaiablelist>

</sec2>

<sec2 id="data-types-matrix">
<title>Matrix</title>
<para>
A matrix represents a set of three-dimensional data points (x, y, z) arranged in a two-dimensional grid.
</para>

<para>
<inlinemediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="Diagram-kst-data-matrix.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Matrix</phrase>
</textobject>
</mediaobject>
</inlinemediaobject>
</para>

<para>
Just as is the case with the vector datatype, there are two kinds of matrix: data and static. Data matrices are read in from data sources, and static matrices are generated by Kst.
</para>
</sec2>

<sec3 id="data-types-matrix-data">
<title>Data Matrix</title>
<para>
The following is a screenshot of the window displayed when editing data matrix. A new data matrix is created if you choose the Read from data source radio button in the New Matrix dialog.
</para>
<screenshot>
<screeninfo>Edit Matirx</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-matrixedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Matrix</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
All of the options which are available for data matrices are analogous to the options for <link linkend="data-types-vectors-data">Data Vectors</link>.
</para>
</sec3>

<sec3 id="data-types-matrix-static">
<title>Static Matrix</title>
<para>
The following is a screenshot of the window displayed when editing static matrices. Static matrices allow you to create gradient matrices such as the one shown in the background of the annotation object example. A new static matrix is created if you choose the Generate gradient radio button in the New Matrix dialog.
</para>

<screenshot>
<screeninfo>Edit Matirx</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-staticmatrixedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Matrix</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
These options allow you to construct a matrix which has a linear gradient in Z along either the X or Y axis. The steps options allow you to set the size of the matrix, and the X/Y minimum and step size options allow you to set the X and Y ranges.
</para>


</sec3>

<sec2 id="data-types-images">
<title>Images</title>
<para>Images are graphical representations of Matrices. Images can be plotted as color maps, contour maps, or both.
</para>

<screenshot>
<screeninfo>Edit Image</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-imageedit.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Image</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>
<varlistentry>
<term>
<guilable>Matrix Selection
</guilable>
</term>
<listitem>
<para>
Select the matrix to use for this image. New matrices can be created or edited by clicking buttons to the right.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term>
<guilable>Color Map, Contour Map, and Color Map and Contour Map
</guilable>
</term>
<listitem>
<para>
Select the type of image to be plotted. Changing this selection enables or disables sections of the image dialog as appropriate. A color map represents the Z value of each cell in the matrix using a color. A contour map plots curves with lie on locations of constant Z.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Threshold-Lower and Upper
</guilable>
</term>
<listitem>
<para>
  Enter the lower and upper thresholds to use for the mapping of colors. Palette colors are evenly distributed between the lower and upper thresholds. Any cells in the selected matrix with z values less than the lower threshold are mapped to the first color in the palette. Any cells in the selected matrix with z values greater than the upper threshold are mapped to the last color in the palette.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term>
<guilable>Max/Min
</guilable>
</term>
<listitem>
<para>
Clicking this button causes the lower and upper threshold values to be set to the current minimum and maximum z values of the selected matrix.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Smart and Percentile
</guilable>
</term>
<listitem>
<para>
Clicking the Smart button causes the lower and upper threshold values to be set such that the percentage of z values in the selected matrix contained between them is equal to the value in the percentile numberbox.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Real-time auto threshold
</guilable>
</term>
<listitem>
<para>
Selecting this option causes the lower and upper threshold values to be always set to the minimum and maximum of the z values for the selected matrix, even when the matrix updates.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Number of contour levels
</guilable>
</term>
<listitem>
<para>
Select the number of contour levels to use. The contour levels will be distributed evenly between the lowest and highest z values found in the matrix.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term>
<guilable>Color
</guilable>
</term>
<listitem>
<para>
Select the color to use for the contour lines. Clicking this button displays a standard KDE color chooser dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Weight and Use variable line weight
</guilable>
</term>
<listitem>
<para>
Select the weight, or “thickness” of the contour lines. If Use variable line weight is selected, contour lines representing higher elevations are drawn thicker than those representing lower elevations. Use discretion when selecting this option, as images with high contour line densities may become unreadable.
</para>
</listitem>
</varlistentry>

</variablelist>



</sec2>


<sec2 id="data-types-vector-view">
<title>Vector View</title>
<para>
Vector view provides a way to view a portion of the data plot. It excludes any data point which is not in the range of the X/Y limits specified by the user.
</para>

<screenshot>
<screeninfo>Edit Vector View</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="" format="PNG" />
</imageobject>
<textobject>
<phrase>Edit Vector View</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>
<varlistentry>
<term>
<guilable>Input Vectors
</guilable>
</term>
<listitem>
<para>
Select an input X/Y axis vector from existing vectors or create one by using the shortcut icons.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>View Ranges
</guilable>
</term>
<listitem>
<para>
Adjust the view range of the plot by selecting X/Y min and X/Y max for the input vectors.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Flag Vector
</guilable>
</term>
<listitem>
<para>

</para>
</listitem>
</varlistentry>



</vairablelist>
</sec2>
</sec1>


<sec1 id="Data Tools">
<title>Data Tools</title>
<sec2 id="data-tools-data-wizard">
<title>The Data Wizard</title>
<para>
The Data Wizard provides a graphical quick and easy way of importing data into Kst- automatically creating vectors, curves, power spectra, and plots. To launch the wizard, select Data Wizard from the Tools menu. You will be prompted to select a data source. Browse to a valid data file (or enter in the path to a data file) and click Next. The following window will be displayed.
</para>



<sec3 id="Select Data">
<title>Select Data</title>
<screenshot>
<screeninfo>Select Data</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-wizard-selectdata.png
" format="PNG" />
</imageobject>105
<textobject>
<phrase>Select Data</phrase>
</textobject>
</mediaobject>
</screenshot>
<para>
Data Wizard Select Data Dialog Here you can select the fields you wish to import into Kst. You may filter the list of fields by entering a string to match (wildcards such as * are supported) into the text box above the list. Click the Next button to come to the Data Presentation pane.
</para>
</sec3>

<sec3 id="Presention">
<title>Presentation</title>


<screenshot>
<screeninfo>Data Presentation</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-wizard-presentation.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Data Presentation</phrase>
</textobject>
</mediaobject>
</screenshot>
<para>
Data Wizard Data Presentation Pane The Data Range section is used to specify the range of data to read from the selected vectors in the input file. For information about these parameters, read the description of the Vector data object.
</para>


<para>
Power Spectrum and X axis settings can be specified within the Plot Types section. These settings are described below.
</para>

<varlistentry>
<term>
<guilable>XY, Power Spectrum, and XY and Power Spectrum
</guilable>
</term>
<listitem>
<para>
 Select whether to plot the power spectrum only, data (XY) only, or both. If the power spectrum is selected for plotting, additional settings in this section become available.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>X Axis Vector
</guilable>
</term>
<listitem>
<para>
The vector to be used as the independent vector for the plots. You may select a field from your data file, or the INDEX vector. The INDEX vector is simply a vector containing elements from 0 to N-1, where N is the number of frames in the data file.
</para>
</listitem><term>
<guilable>Select Data
</guilable>
</term>
<listitem>
</varlistentry>


<para>
The FFT Options subsection in the Plot Types section is available only if a power spectrum is to be plotted. Detailed information on these options can be found in the Spectrum section.
</para>

<para>
Once you are satisfied with all the settings, click Next to advance to advance to the final window.
</para>

</sec3>

<sec3 id ="configure plot layout">
<title>Configure Plot Layout</title>
<screenshot>
<screeninfo>plot layout</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-wizard-configurelayout.png" format="PNG" />
</imageobject>
<textobject>
<phrase>plot layout</phrase>
</textobject>
</mediaobject>
</screenshot>

<variablelist>
<varlistentry>
<term>
<guilable>Curve Style
</guilable>
</term>
<listitem>
<para>
Select whether to plot data points only, lines connecting the data points only, or both. By default, lines are continuous with weight 0, and data points are marked using crosses. Line and data point colours are chosen so that curves with identical colours are minimized. Note that the curve style settings apply to both Power Spectra and XY plots.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Curve Placement
</guilable>
</term>
<listitem>
<para>
Select the plots to place the new curves on. Cycle through distributes the curves on the plots by cycling through the plots. Note that the curve placement settings apply to both Power Spectra and XY plots.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Label Generation
</guilable>
</term>
<listitem>
<para>
Select the desired labels and legends to be placed on the plots.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Plot Placement
</guilable>
</term>
<listitem>
<para>
Select the desired window(s) to place the new plots on. New windows can be created for the plots by selecting In new window.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>Power Spectrum Axis Mode
</guilable>
</term>
<listitem>
<para>
Select these check-boxes if you would like the automatically created power spectra to have logarithmic X or Y axes.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
Once you are satisfied with all the settings, click Finish and the plots will be generated.
</para>

</sec3>

</sec2>
</sec1>

<sec2 id="data-tools-datamenu">
<title>The Data Menu</title>
<para>
The Data menu provides quick access to many features related to data objects in Kst. Most of the menu functions duplicate functions found elsewhere, so only brief descriptions are provided below.
</para>
<variablist>
<varlistentry>
<term>
<guilable>Reload
</guilable>
</term>
<listitem>
<para>
Reloads all data vectors from their source files.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>data Manager
</guilable>
</term>
<listitem>
<para>
Display the <link linkend = "data-overview-datamanager">Data Manager</link>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>View Manager
</guilable>
</term>
<listitem>
<para>
Display the <link linkend = "data-overview-viewmanager">Data Manager</link>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>New[data object]
</guilable>
</term>
<listitem>
<para>
Displays the corresponding dialog for creating the data object. Refer to <link linkend = "data-types">Data Types</link> for descriptions of each dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>View Scalar Values
</guilable>
</term>
<listitem>
<para>
Displays a dialog from which the values of all the scalars in the current Kst session can be viewed. The values are displayed hierarchically, based on which higher level data objects the scalars are determined for. The dialog is updated dynamically if the values change.
</para>

<screenshot>
<screeninfo>View Scalar Values</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-viewscalarvalues.png
" format="PNG" />
</imageobject>
<textobject>
<phrase>View Scalar Values</phrase>
</textobject>
</mediaobject>
</screenshot>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>View Matrix Values
</guilable>
</term>
<listitem>
<para>
 Displays a dialog from which the values in all the current matrices can be viewed. Select a matrix to view using the drop-down list. The dialog is updated dynamically if the values change.
</para>

<screenshot>
<screeninfo>View Matrix Values</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-viewmatrixvalues.png
" format="PNG" />
</imageobject>
<textobject>
<phrase>View Matrix Values</phrase>
</textobject>
</mediaobject>
</screenshot>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guilable>View Fit Results
</guilable>
</term>
<listitem>
<para>
Displays a dialog which shows all the resulting values from fit plugins. Select a fit result to view using the drop-down list. The dialog is updated dynamicaScreenshot-kst-data-viewmatrixvalues.pnglly if the values change.
</para>

<screenshot>
<screeninfo>View Fit Results</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-commontasks-curvefitting-fitresults.png
" format="PNG" />
</imageobject>
<textobject>
<phrase>View Matrix Values</phrase>
</textobject>
</mediaobject>
</screenshot>
</listitem>
</varlistentry>



</variablelist>
</sec2>

<sec2 id="data-tools-dataviewmode">
<title>Data View Mode</title>
<para>
Data mode allows precise viewing of the data points used in a plotted data object. To toggle data mode, select Data Mode from the Plots menu, or click the <guibutton> Data Mode button</guibutton> on the Toolbar. Now, when the cursor is moved over a plot, a coloured dot will indicate the closest data point to the cursor, as shown in the screenshot below. The status bar will display the coordinates of the data point (in terms of the x and y vectors used to plot the data object) in status bar at the lower left corner of the Kst window. The status bar will also display the x, y, and z coordinates of any visible image. If images overlap, only the coordinates of the topmost image will be displayed. Note that all zooming functions are still available while in data mode.
</para>

<screenshot>
<screeninfo>Data Mode</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-datamode.png" format="PNG" />
</imageobject>
</mediaobject>
</screenshot>
<tip>
<para>
If the status bar is not visible, make sure <guimenuitem>Show Statusbar</guimenuitem> is checked in the
<guimenu>Setting</guimenu> menu.
</para>
</tip>
</sect2>

<sect2 id="data-tools-changedatafile">
<title>Change Data File</title>
<para>
One common mode of using &kst; is to create a 'session' of plots and analysis for a particular type of data. Then, the same plots and analyses can be performed easily on another set of similar data simply by changing the files from which &kst; pulls its data. This is easily done using the <guimenuitem>Change Data File</guimenuitem> menu item from the <guimenu>Tools</guimenu>, the dialog which appears is shown below:
</para>

<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-changedatafile.png" format="PNG"/>
</imageobject>

<para>
To use this dialog, select the vectors which you would like to change the data file of using the list in the middle of the dialog. The All From, Clear, Select All, and search fields can help you to do this. Then, select a new data file. If the "Change selected vectors and matrices" radio button is selected, then when you press Apply or OK the selected data vectors will have their data file changed, and will be reloaded. If the "Duplicate selected vectors and matrices" option is selected, then new vectors will be created which have the same ranges and sampling rates as the ones selected, but pull their data from the new file. If some of the selected vectors have dependents (curves, spectra, histograms, etc.) then the "Duplicate dependents" option will allow you to duplicate these other objects as well.
</para>
</sect2>

<sect2 id="data-tools-changesampleranges">
<title>Change Data Sample Ranges</title>
<para>
The <guimenuitem>Change Data Sample Ranges</guimenuitem> dialog can be accessed through the <guimenu>Tools</guimenu>. It allows you to modify how a set of vectors are read in from their associated files. The options are detailed in the <link linkend="data-tools-wizard-range">Data Range</link> section of the <link linkend="data-tools-wizard">Data Wizard</link> documentation.
</para>
Once you are satisfied with all the settings, click Finish and the plots will be generated.
<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-changesampleranges.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>

</sect2>
</sect1>

<sect1 id="data-sources">
<title>Datasources</title>
<para>
&kst; uses externally linked datasources to read from data files. This means that new data formats can be transparently added to the &kst; repertoire. 

Currently, the &kst; distribution includes the following default datasources:
<itemizedlist>
<listitem><para><link linkend="data-sources-ascii">ASCII</link></para></listitem>
<listitem><para><link linkend="data-sources-dirfiles">Dirfiles</link></para></listitem>
<listitem><para><link linkend="data-sources-healpix">HEALPix</link></para></listitem>
<listitem><para><link linkend="data-sources-qimage">QImage</link></para></listitem>
<listitem><para><link linkend="data-sources-indirect">Indirect</link></para></listitem>
<listitem><para><link linkend="data-sources-cdf">CDF</link></para></listitem>
<listitem><para><link linkend="data-sources-netcdf">netCDF</link></para></listitem>
<listitem><para><link linkend="data-sources-lfiio">LFIIO</link></para></listitem>
<listitem><para><link linkend="data-sources-scuba">SCUBA</link></para></listitem>
</itemizedlist>

If you have a data format which you would like &kst; to read, it's easy to <link linkend="supportingadditionalfileformats">create</link> your own.
</para>

<para>
All of the data sources read from files using KIO, which is usually able to load data through common file compression formats (eg. BZIP2, GZIP, ZIP, TAR) and most popular networking protocols (eg. HTTP, FTP, SFTP, SMB). For more information on which formats are supported on your system type <userinput><command>kinfocenter</command></userinput> at the command line and inspect the protocols tab. If &kst; detects that you have typed a URL into the filename of a vector or matrix, for example, a '<guibutton>Connect</guibutton>' button will appear. Clicking the <guibutton>Connect</guibutton> button instructs &kst; to load the indicated data, and channel it to a suitable data source.
</para>

<anchor id="data-sources-concepts"></anchor>
<para>
The following concepts are important in understanding how &kst; works with
data sources. Some terminology is also introduced in this section.
</para>

<variablelist>

<varlistentry>
<term>Samples</term>
<listitem>
<para>
A sample is considered to be the fundamental unit with respect to data files.
Each sample consists of one data value in the file.  Note, however, that one sample
may not correspond to one value in a data vector in &kst;, due to the concept of
<link linkend="data-sources-concepts-frames">frames</link>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Fields</term>
<listitem>
<para>
A field usually corresponds to one vector in &kst;.  For example, a column in an
ASCII data file is considered to be one field.  Each field can have an explicit
or implicit name.  Datasource readers provide functions for reading and obtaining
fields and field names.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term id="data-sources-concepts-frames">Frames</term>
<listitem>
<para>
A frame corresponds to a set number of samples, and each field in a data file
can have its own ratio of samples per frame.  The size of a data file
is measured by the number of frames it contains.  For ASCII data files, the number of samples
per frame is 1, but for some data files, there may be multiple samples per frame.  In the below
illustration, the first 3 frames of an imaginary data file are shown.  In this particular data
file, Field 1 has a ratio of 5 samples per frame, Field 2 has a ratio of 2 samples per frame,
Field 3 has a ratio of 3 samples per frame, and Field 4 has a ratio of 1 sample per frame.
</para>

<para>
<inlinemediaobject>
<imageobject>
<imagedata fileref="Diagram-kst-data-framesconcept.png" format="PNG"/>
</imageobject>
</inlinemediaobject>
</para>

<para>
Depending on the specific data vector settings in &kst;, data from files may be read as frames instead of samples, with either the first sample in a frame or the mean of all the samples in a frame representing the value of the frame. This capability can be useful for reducing extremely large data-sets to a more manageable size.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term id="data-sources-concepts-index">INDEX field</term>
<listitem>
<para>
Some data files may not have a field that represents the x axis of a plot. However, &kst;
implicitly creates an INDEX field for all data sources.  The INDEX field simply contains
integers from 0 to N-1, where N is the number of frames in the data file.
</para>
</listitem>
</varlistentry>
</variablelist>

<sect2 id="data-sources-ascii">
<title>ASCII</title>
<para>
The simplest input file format is the ASCII text file.  These files are usually human-readable and
can be easily created by hand or simple scripts if desired.  The following is an example of an ASCII input file.
</para>

<informalexample>
<screen>
112.5 3776 428
187.5 5380 429
262.5 5245 345
337.5 2942 184
412.5 1861 119
487.5 2424 138
567.5 2520 162
637.5 1868 144
712.5 1736 211
787.5 1736 211
862.5 2172 292
937.5 1174 377
1000.5 499 623
</screen>
</informalexample>

<screenshot>
<screeninfo>Datasources - Configure ASCII</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-asciiconfig.png" format="PNG" />
</imageobject>
</mediaobject>
</screenshot>

<variablelist>
<varlistentry>
<term>Comment Indicators</term>
<listitem>
<para>
By default, commented lines in ASCII files start with one of the characters in this set
<literal>{#, !, /, ;, c}</literal>.  All commented lines and empty lines
are ignored by &kst;.  Valid numbers include those with decimals, negative signs,
or <literal>e</literal>, to indicate scientific notation. Invalid numbers (such as
English words) are replaced with 0 by &kst;.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Interpret ... As ...</term>
<listitem>
<para>
See the <link linkend="view-types-plot-interpretas">corresponding section</link> for the 2D Plot Dialog.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Always accept files matching:</term>
<listitem>
<para>
Here you can enter an expression which you want to designate ASCII data files, in case they are being claimed by another data source.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Data starts at line:</term>
<listitem>
<para>
Data before this line will be ignored. Setting this value to zero ensures that all of the data will be read.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Read field names from line:</term>
<listitem>
<para>
If this option is selected, the field names for the file's vectors will be read from the specified line. If the columns do not have labels, field names are assigned by &kst; based on the
order of the columns (with the leftmost column having a field name of <literal>1</literal>).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Data format</term>
<listitem>
<para>
Choose the option which describes how the data is delimited (how the columns and rows are separated). Each column of this file represents a field, while each row represents one frame.
Columns are typically separated by tabs or spaces, and rows are separated by carriage returns.
</para>
</listitem>
</varlistentry>

</variablelist>
</sect2>


<sect2 id="data-sources-dirfiles">
<title>Dirfiles</title>
<para>
Dirfiles are a very simple data source designed to be read efficiently by &kst;.  The data
source is a directory which contains each raw field in its own binary file.  Because the data
for a given field are stored squentially on disk in a binary format, reading is very efficient,
typically limited by hard disk speed.  Fixed and floating point binary formats are supported, as
well as calibrations, bit fields and linear combinations of channels.
</para>
<para>
The directory contains one file for each field.
These files contain only the raw samples, written sequentially.  As in the rest of &kst;, each field in a
datasource must have the 
same number of frames, but each field may have a different (fixed) number of samples per frame.  Fomatting
and calibration information is contained in a file in the Dirfile called
<filename>format</filename>, which lists each field and its properties.  Below is example of such a file: In 
this file, a '#' specifies a comment, and for all fields, the first column specifies the field name.
</para>
<informalexample>
<screen>
##### Raw fields ####
# data types: 
# c: 8 bit signed
# u: 16 bit unsigned.  U: 32 bit unsigned
# s: 16 bit signed     S: 32 bit signed
# f: 32 bit float      d: 64 bit float
# The fieldname is also the name of the raw binary file 
# holding the data.
# Fieldname  RAW    datatype   samples/frame
sensor1      RAW       s         1
sensor2      RAW       U         20
sensor3      RAW       c         1
#
#### derived fields ####
# LINCOM fields: (F_out = F1_in*m+b [+ F2_in*m+b [+ ...]])
# Fieldname  LINCOM  N  Field1_in       gain        offset 
S1V          LINCOM  1  sensor1    1.52587890625E-4 0.00
#
# LINTERP Fields: Calibrate using an ascii lookup table.
# lookup table format: 
#     2 whitespace separated columns
#     The first colum is raw values, and the second is 
#     a corresponding calibrated value.  The file must be
#     sorted by column 1.
# The table is linearly interpolated to the value of 
# Field_in.
# Fieldname  LINTERP  Field_in  Calibration_file
S2K          LINTERP  sensor2   /data/etc/calibration/C2K.cal
#
# BIT values: the value of 1 bit of raw data: 0 or 1
# Fieldname  BIT  Field_in  bit_num (0 to 7 for chars)
RELAY1       BIT  sensor3   0
RELAY2       BIT  sensor3   1 
#
# The next line includes the contents of another format file 
# into this one.  Any fields refered to in this file will be 
# looked for in ../work/, not in ./, so this is essentially 
# including an entire other datasource.
INCLUDE ../work/format

</screen>
</informalexample>
<para>
The following code fragment could (which foolishly ignores all pretences at error
checking) be used to create this data source...
</para>
<informalexample>
<screen>
  char bits[1000];
  short s1[1000];
  unsigned int s2[20000];
  int fp;

  ......
  /* fill bits, s1, and s2 with data...*/
  ......

  fp = open("/data/example/sensor3",  O_WRONLY|O_CREAT, 00644);
  write(fp, bits, 1000*sizeof(char));
  close(fp);

  fp = open("/data/example/sensor2",  O_WRONLY|O_CREAT, 00644);
  write(fp, bits, 1000*20*sizeof(unsigned int));
  close(fp);

  fp = open("/data/example/sensor1",  O_WRONLY|O_CREAT, 00644);
  write(fp, bits, 1000*sizeof(short));
  close(fp);

  /* create the ascii file /data/example/format, listed above */
  /* create the cal file, /data/etc/calibration/C2K.cal,
     described above. */

  ......
</screen>
</informalexample>

<para>
Dirfiles can be used for real time data, but but as each field is written separately, this
requires some extra care.  First of all, the writting application should avoid all buffering 
or caching - raw writes as in the above example work fine.  Secondly, the order in which the
fields are written need to be considered:  &kst; determines the number of frames avalible in
the data source from the size of the file containing the first RAW field encountered in the
format file.  So the first RAW field in <filename>format</filename> needs to be the last one
written, as in the above example.  If the data source is being read over NFS, atribute caching
needs to be turned off.
</para>
<para>
When selecting a dirfile for use in &kst;, the directory containing the field files should be
selected. &kst; will then automatically look for a <filename>format</filename> file, if it exists,
to determine the fields and their properties.
</para>
</sect2>

<sect2 id="data-sources-healpix">
<title>HEALPix FITS files</title>
<para>
HEALPix is a pixelisation scheme for the sphere. More information can be found at <ulink url="http://healpix.jpl.nasa.gov/">http://healpix.jpl.nasa.gov/</ulink>. HEALPix data is typically be loaded into &kst; as a matrix. For this data source to work you must have the CFITSIO libraries installed. An image of a sample HEALPix matrix is shown below:
</para>

<screenshot>
<screeninfo>HEALPix example</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-healpixexample.png" format="PNG" />
</imageobject>
</mediaobject>
</screenshot>

<para>
Here is the configuration dialog for the HEALPix data source, an explanation of the possible options is given underneath:
</para>

<screenshot>
<screeninfo>HEALPix example</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-healpixconfig.png" format="PNG" />
</imageobject>
</mediaobject>
</screenshot>

<variablelist>

<varlistentry>
<term>Dimensions</term>
<listitem>
<para>
The size of the matrix to create based on the HEALPix data. The larger the matrix, the higher the resolution. If you choose dimensions which are larger than the resolution of the data in the HEALPix file, you will be able to see the shape of the HEALPix pixels in the image of the matrix.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Theta / Phi Range</term>
<listitem>
<para>
The colatitude / azimuth range of data to extract.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Theta / Phi Range</term>
<listitem>
<para>
The colatitude / azimuth range of data to extract.
</para>
</listitem>
</varlistentry>

<!--FIXME: how do the polarization options work? -->
</variablelist>

</sect2>

<sect2 id="data-sources-qimage">
<title>QImage</title>
<para>
The QImage datasource allows you to read image data into &kst; matrices from a variety of formats. The collection of supported formats depends on the libraries installed on your system, but most popular formats are generally readable. If you'd just like to add a picutre to a plot, then the <link linkend="view-types-pictures">Picture</link> annotation object is a better choice to use. An example of an image plotted from a QImage sourced matrix is shown below:
</para>
<screenshot>
<screeninfo>QImage example</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-data-qimageexample.png" format="PNG" />
</imageobject>
</mediaobject>
</screenshot>
</sect2>

<sect2 id="data-sources-indirect">
<title>Indirect</title>
<para>
This is a 'helper' data source, which allows you to access data through a file pointer. If you put the URL or path of a data file on the first line of a text file with the extension '.cur', then the Indirect data source is used to load the referenced file. The use of this is that the contents of the '.cur' file can then be externally modified to change the data file which is loaded by &kst;.
</para>
</sect2>

<sect2 id="data-sources-cdf">
<title>CDF</title>
<para>
The <ulink url="http://cdf.gsfc.nasa.gov/">Common Data Format</ulink> (CDF) was developed by NASA. It is described as <quote>a self-describing data format for the storage and manipulation of scalar and multidimensional data in a platform- and discipline-independent fashion.</quote>. This means that it is a generalized file format for storing and retrieving data, similar to FITS and netCDF. For this datasource to work you must have the CDF libraries installed.
</para>
</sect2>

<sect2 id="data-sources-netcdf">
<title>netCDF</title>
<para>
The <ulink url="http://www.unidata.ucar.edu/software/netcdf/">network Common Data Form</ulink> (netCDF) was developed by <ulink url="http://www.unidata.ucar.edu/">Unidata</ulink>. They describe it as <quote>a set of interfaces for array-oriented data access and a freely-distributed collection of data access libraries for C, Fortran, C++, Java, and other languages. The netCDF libraries support a machine-independent format for representing scientific data. Together, the interfaces, libraries, and format support the creation, access, and sharing of scientific data.</quote>. In practice, it is similar to the FITS and netCDF 'formats'. For this datasource to work you must have the netCDF libraries installed.
</para>
</sect2>

<sect2 id="data-sources-lfiio">
<title>LFIIO</title>
<para>
The LFIIO datasource reads FITS format data files created by the LFI component of the <ulink url="http://www.rssd.esa.int/Planck">Planck</ulink> satellite. It is currently the default reader for FITS files in &kst;. For this datasource to work you must have CFITSIO installed. A generalized FITS datasource is currently under development.
</para>
</sect2>

<sect2 id="data-sources-wmap">
<title>WMAP Reader</title>
<para>
This datasource allows you to load vectors from WMAP Time Ordered Data (TOD) files. For more information, see <ulink url="http://lambda.gsfc.nasa.gov/">http://lambda.gsfc.nasa.gov/</ulink>. For this datasource to work you must have CFITSIO installed.
</para>
</sect2>

<sect2 id="data-sources-scuba">
<title>SCUBA File Reader</title>
<para>
This datasource allows you to read the datafiles produced for <ulink url="http://www.jach.hawaii.edu/JCMT/continuum/">SCUBA</ulink>, an instrument on the JCMT telescope in Hawaii.
</para>
</sect2>


</sect1>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:0
sgml-indent-data:true
sgml-parent-document:("index.docbook" "book" "chapter")
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
