#MIN_CONFIG(3.1)

AM_INIT_AUTOMAKE(showimg,0.9.5)

CXXFLAGS="$CXXFLAGS $KDE_DEFAULT_CXXFLAGS"

AC_CHECK_HEADERS(unistd.h sys/param.h floatingpoint.h paths.h)
AC_CHECK_KDEMAXPATHLEN

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

#------------------------------------------------------------------
# Check in .bot if showimg is disabled
#------------------------------------------------------------------
showimg_enabled=yes

#------------------------------------------------------------------
# create showimg_top_srcdir and showimg_top_builddir
#------------------------------------------------------------------
showimg_top_srcdir='$(top_srcdir)/showimg'
showimg_top_builddir='$(top_builddir)/showimg'
AC_SUBST(showimg_top_srcdir)
AC_SUBST(showimg_top_builddir)

#------------------------------------------------------------------
# check for konq_operations.h
#------------------------------------------------------------------
KDE_CHECK_HEADER(konq_operations.h, ,
	AC_MSG_WARN(The file konq_operations.h is needed for ShowImg but is missing. If you use KDE packages please check you have installed the kdebase-devel package.)
	DO_NOT_COMPILE="showimg $DO_NOT_COMPILE"
	showimg_enabled=no
	)
#------------------------------------------------------------------
# check for KIPI
#------------------------------------------------------------------

# check for want_kipi
AC_MSG_CHECKING(if ShowImg should be compiled with KIPI support)
AC_ARG_ENABLE(
	libkipi,
	[  --enable-libkipi        enable KIPI plugin support default=yes],
	[if test "$enableval" = yes; then
		AC_MSG_RESULT(yes)
		want_kipi="yes"
	else
		AC_MSG_RESULT(no)
		want_kipi="no"
		AC_MSG_WARN([KIPI plugin support will not be compiled])
	fi],
	[AC_MSG_RESULT(yes); want_kipi="yes"])

# check for libkipi
if test "$want_kipi" = "yes" ; then
	KDE_CHECK_HEADER(libkipi/interface.h, have_libkipi="yes")
	if test "x$have_libkipi" = "xyes" ;then
		LIBKIPI_CFLAGS=''
		LIBKIPI_LIBS='-lkipi'
		AC_SUBST(LIBKIPI_CFLAGS)
		AC_SUBST(LIBKIPI_LIBS)
		AC_DEFINE(HAVE_KIPI, 1, [If we have enable KIPI])
	fi
fi


#------------------------------------------------------------------
# Check for Exiv2 library
#------------------------------------------------------------------

have_exiv2='no'
KDE_CHECK_HEADER(exiv2/exif.hpp, have_exiv2=yes, have_exiv2=no)

if test "x$have_exiv2" != "xyes"; then
  AC_WARN([Exiv2 library not found.])
else
  LIB_EXIV2="-lexiv2"
  AC_SUBST(LIB_EXIV2)
  AC_DEFINE(HAVE_LIBEXIV2, 1, [If we have libexiv2])
fi

#------------------------------------------------------------------
# Check for libkexiv2 library
#------------------------------------------------------------------

have_libkexiv2='no'
KDE_CHECK_HEADER(libkexiv2/kexiv2.h, have_libkexiv2=yes, have_libkexiv2=no)

if test "x$have_libkexiv2" != "xyes"; then
  AC_WARN([libkexiv2 library not found.])
else
  LIB_EXIV2="-lkexiv2"
  AC_SUBST(LIB_KEXIV2)
  AC_DEFINE(HAVE_LIBKEXIV2, 1, [If we have libkexiv2])
fi



#---------------------------------------------------------
# libexif detection
#---------------------------------------------------------
PKG_CHECK_MODULES([LIBEXIF], [libexif >= 0.5.7],
        have_libexif=yes ,
        have_libexif=no
)

if test "x$have_libexif" = "xyes" ; then
	AC_DEFINE_UNQUOTED([HAVE_LIBEXIF], 1, [If we have libexif])
fi

AC_SUBST(LIBEXIF_LIBS)
AC_SUBST(LIBEXIF_CFLAGS)


#---------------------------------------------------------
# check for libkexi
#---------------------------------------------------------
AC_MSG_CHECKING(if ShowImg should be compiled with showimgdb support)
AC_ARG_WITH(
	showimgdb,
	[  --with-showimgdb        compile the showimgdb support [default=yes]],
	[if test "$withval" = yes ; then
		AC_MSG_RESULT(yes)
		want_showimgdb="yes"
	else
		AC_MSG_RESULT(no)
		want_showimgdb="no"
	fi],
	[AC_MSG_RESULT(yes); want_showimgdb="yes"])

compile_showimgdb="yes"
if test "x$want_showimgdb" != "xyes" ; then
  compile_showimgdb="no"
fi
AM_CONDITIONAL(compile_showimgdb, test "$compile_showimgdb" = "yes")

if test "x$want_showimgdb" = "xyes" ; then
	LIBKEXIDB_LDDADD='$(showimg_top_builddir)/kexi/kexidb/libshowimgkexidb.la $(showimg_top_builddir)/kexi/kexidb/parser/libshowimgkexidbparser.la $(showimg_top_builddir)/kexi/kexiutils/libshowimgkexiutils.la $(showimg_top_builddir)/showimgdb/libshowimgdb.la'
	LIBKEXIDB_LIBS=''
	LIBKEXIDB_CPPFLAGS='-I$(showimg_top_srcdir)/kexi -I$(showimg_top_srcdir)/showimgdb'
	AC_DEFINE(WANT_LIBKEXIDB, 1, [If we want kexidb support])
else
	AC_MSG_WARN([kexidb/showimgdb support will not be compiled])
fi
AC_SUBST(LIBKEXIDB_LDDADD)
AC_SUBST(LIBKEXIDB_LIBS)
AC_SUBST(LIBKEXIDB_CPPFLAGS)




#---------------------------------------------------------
# check for kdemacros.h
#---------------------------------------------------------
AC_LANG_PUSH(C++)
libshowimg_kdemacros_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $all_includes"  
AC_MSG_CHECKING([if kdemacros.h is usable])
AC_COMPILE_IFELSE(
 [
   #include <kdemacros.h>
   #include <string>
   int other_func( void ) KDE_EXPORT;
   int other_func( void )
   { 
      std::string s("KDE_EXPORT");
      return 0;
   }
 ], 
 [ AC_MSG_RESULT([yes])
   AC_DEFINE(KDEMACROS_USABLE, 1, [kdemacros.h usable]) ], 
 [ AC_MSG_RESULT([no]) ] 
)
CPPFLAGS=$libshowimg_kdemacros_cppflags
AC_LANG_POP(C++)





