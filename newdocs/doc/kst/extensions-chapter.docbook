<chapter id="extensions">
<title>Kst Extensions</title>

<sect1 id="elogextension">
<!-- FIXME: review ELOG documentation -->
<title>The ELOG Extension</title>
<para>
The ELOG extension allows event monitors to create logbook entries on a server running the Electronic Logbook (ELOG) application. The created logbook entries can be used, for example, to remotely monitor &kst; events or to produce periodic data reports. For information on configuring and maintaining an ELOG server, please see the official <ulink url="http://midas.psi.ch/elog/">ELOG Homepage</ulink>. To enable the ELOG extension in &kst;, select <guimenuitem>Extensions...</guimenuitem> from the <guimenu>Settings</guimenu> menu and ensure that <quote>ELOG Extension</quote> is checked.
</para>

<sect2 id="elogextensionsettings">
<title>Server and Logging Settings</title>
<para>
Server and logging settings should be configured if ELOG functionality is enabled for an event monitor object. To configure logging settings, click the <guibutton>Configure...</guibutton> button in the <guilabel>ELOG</guilabel> section of the Event Monitor dialog. The ELOG Event Entry dialog should be displayed:
</para>
<screenshot>
<screeninfo>Event Monitor Logging Settings</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-eventmonitor-loggingsettings.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Event Monitor Logging Settings</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
Use the three checkboxes at the bottom to select the type of information to be logged.
<guilabel>Include Kst capture</guilabel> specifies that a screen capture of the
currently active window should be included in the entry.  <guilabel>Include Kst configuration file</guilabel>
specifies that <filename>*.kst</filename> save file should be attached to the entry. Finally, if
<guilabel>Include Kst debugging information</guilabel> is checked, a copy of the
<link linkend="debuglog">debug log</link> will be attached to the entry as well.
</para>

<para>
Additional fields
will appear in this dialog once ELOG server settings are configured.  To customize ELOG server settings, click the <guibutton>Configuration...</guibutton> button. The
following dialog should be displayed:
</para>

<screenshot>
<screeninfo>Event Monitor Server Settings</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-eventmonitor-serversettings.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Event Monitor Server Settings</phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
Descriptions of the settings in this dialog follow.
</para>
<variablelist>
<varlistentry>
<term>
<guilabel>Configuration</guilabel>, <guibutton>Save</guibutton>, and <guibutton>Load</guibutton>
</term>
<listitem>
<para>
The <guilabel>Configuration</guilabel> drop down list contains a list of saved ELOG server configurations.
To load a set of configuration settings, select an item from the list and click the <guibutton>Load</guibutton> button.
To save the current configuration settings in this dialog into a slot, select the desired slot and click the
<guibutton>Save</guibutton> button.
</para>
<caution>
<para>
Saving settings into a slot overwrites any existing settings in that slot.
</para>
</caution>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>IP address</guilabel> and <guilabel>Port number</guilabel></term>
<listitem>
<para>
Enter the IP address of the machine running the ELOG server application.  The port number that the ELOG server
listens on is configurable through the server, but by default it is 8080, so if you are unsure, enter 8080 as
the port number.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Logbook</guilabel></term>
<listitem>
<para>
Each ELOG server can contain one or more logbooks, so the name of the logbook to write entries to must be
specified.  Ensure that the spelling of the logbook is correct.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>User name</guilabel>, <guilabel>User password</guilabel>, and <guilabel>Write password</guilabel></term>
<listitem>
<para>
Depending on the how the ELOG server application is configured, these settings may or may not be necessary.
If they are, enter the correct login credentials in the appropriate textboxes.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Capture size</guilabel></term>
<listitem>
<para>
Use this list box to select the size, in pixels, of the &kst; screen capture to attach (if specified).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Submit as HTML text</guilabel></term>
<listitem>
<para>
If this checkbox is selected, HTML tags may be used in the logbook entry.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><guilabel>Suppress e-mail notification</guilabel></term>
<listitem>
<para>
If the logbook is configured to send e-mail notifications of new entries, selecting this checkbox
will disable the notifications.  Note that this option is not related to &kst;'s own e-mail notification
setting for event monitors.
</para>
</listitem>
</varlistentry>

</variablelist>

<para>
Click the <guibutton>Apply</guibutton> button to apply the entered settings.  Click <guibutton>Update</guibutton>
to update the ELOG Event Entry dialog (the previous dialog).  Additional fields should appear in the
ELOG Event Entry dialog.  These fields are unique to the selected logbook.  Once you are satisfied with the settings,
the <guibutton>Test</guibutton> button
can be used to send a test logbook entry.  Click <guibutton>Close</guibutton> to exit the dialog.
</para>
</sect2>
</sect1>

<sect1 id="kstscript">
<title>KstScript</title>
<para>
KstScript is a JavaScript binding for &kst;. It aims to offer full control over all aspects of &kst;.
</para>

<sect2 id="kstscriptrunning">
<title>Running a KstScript</title>
<para>
There are three ways to to run a KstScript.
</para>

<itemizedlist>
<listitem> <para>
  from the command line when starting &kst;:
<screen><userinput><command>
kst -E js:"loadScript('myscript.js')"
</command></userinput></screen>

</para> </listitem>
<listitem> <para>
  using kstcmd. kstcmd is a JavaScript interpreter which connects to your &kst; session. It can be run from an external terminal, or from within &kst; itself by selecting <guimenuitem>Show JavaScript Console</guimenuitem> from the <guimenu>Tools</guimenu> menu.
<screen><userinput><command>
kstcmd
</command></userinput>
Attached to Kst session kst-17704
kst> <command>loadScript(myscript.js)</command>
</screen>
</para> </listitem>
<listitem> <para>
  from the menu once &kst; is loaded: File->LoadJavaScript
</para> </listitem>
</itemizedlist>
<para>
Note that with the first two methods, any KstScript command, or collection of KstScript commands can be substituted for the loadscript command.
</para>

</sect2>

<sect2 id="kstscriptpower">
<title>The Power of KstScript</title>

<para>
KstScript gives &kst; a powerful programming interface. Chiefly, it can be used to construct 'smart' macro functions for common tasks. We will first look at a basic example illustrating how to control &kst; through KstScript, and then we will look at an example of a macro function.
</para>

<sect3 id="kstscriptexample">
<title>A simple KstScript</title>
<para>
Here we have the 'hello world' of KstScripts: plot a curve of random numbers. 
</para>
<para> <screen>
// simple.js: A simple KstScript demo.
// Generates a new plot with a curve of random numbers.

// grab the window
var w = Kst.windows[0];

// add a plot to the window
var p = new Plot(w);

// create new (editable) vectors.
// these could also be loaded from files.
var xv = new Vector(); var yv = new Vector();

xv.tagName = "time"; yv.tagName = "signal";

// make their length 100.
xv.resize(100); yv.resize(100);

// fill in their values.
for (var i = 0; i &lt; 100; i++) {
        xv[i] = i; //index
        yv[i] = Math.random(); //uniformly distributed between 0 and 1.
}

// create a curve from x and y
var c = new Curve(xv,yv);
c.tagName = "signalvstime";

// put the curve in our new plot
p.curves.append(c);

// label the x-axis of our plot
p.xAxis.label = "Time (s)"
</screen></para>
<para>
This script can be run using any of the methods from <xref linkend="kstscriptrunning"/>. Here is a screenshot of &kst; after entering the commands using the embedded console method.
</para>
<screenshot>
<screeninfo>Simple Output</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-kstscriptexample.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
</mediaobject>
</screenshot>

<para>
In the &kst; UI, objects are not labelled by the variable names which we use in our KstScript, but are are referred to by their Tag Name (or "Unique Name").  If you do not manually set the tagName attribute of new objects, then when you look things up in the data manager you will find cryptic names like "anonymous vector 1", or, "". This is the reason why we received several 'undefined' messages in the screenshot above. If you ever plan to use the UI to work with objects you have created with a KstScript, you will want to set their tagName property. You can also use tag names within KstScript itself. For example, after setting the tagName of our new curve we could have called
<screen>
p.curves.append("signalvstime");
</screen>
</para>
</sect3>

<sect3 id="kstscriptsubroutines">
<title>Writing, Including, and Calling Functions</title>
<para>
As with any JavaScript environment, you can write and call functions with KstScript.  Additionally, KstScript posseses a means for a KstScript to load functions from disk. Consider the following example:
</para>
<para> <screen>
// subroutines.js

function takeSpectraOfTimePlots() {
//takes all of the plots in the first window which have an x-axis of "Time (s)"
 and generates power spectra for their curves, which it dumps into a single new
 plot.
        var w = Kst.windows[0];
        var p = new Plot(w);
        p.xAxis.label = "Frequency (Hz)"

        for (var ip = 0; ip &lt; w.plots.length; ip++ ) {
                cp = w.plots[ip]; //current plot
                if (cp.xAxis.label == "Time (s)") {
                        for (ic = 0; ip &lt; cp.curves.length; ic++) {
                                plotSpectrum(p,cp.curves[ic].yVector)
                        }
                }
        }
}

function plotSpectrum(p,v) {
//creates a power spectrum for the vector v and displays it in plot p. assumes
the vector is data sampled at 1Hz.
        ps = new PowerSpectrum(v, 1);
        ps.tagName = v.tagName + "-PS";
        c = new Curve(ps.xVector,ps.yVector);
        c.tagName = ps.tagName + "-C";
        p.curves.append(c);
}

</screen> </para>
<para>
This example contains two functions: <command>takeSpectraOfTimePlots()</command> and <command>plotSpectrum(p,v)</command>. takeSpectraOfTimePlots() is a macro function which will generate spectra for all of the plots in the first window which have "Time (s)" as their x-axis. In this example, we can see the power of KstScript for such tasks.
</para>
<para>
The following script loads these routines from the <filename>subroutines.js</filename>. It uses the <filename>simple.js</filename> of the previous section to generate a noise plot with a time axis, and then calles takeSpectraOfTimePlots() to find its spectrum.  Notice that <filename>subroutines.js</filename> is loaded using <command>loadScript()</command>, the same call that we used from the command line in <xref linkend="kstscriptrunning"/>.
</para>
<para> <screen>
// callsubs.js
// demonstrate calling subroutines

loadScript('subroutines.js');
loadScript('simple.js');

takeSpectraOfTimePlots();
</screen> </para>

<para>
A screenshot of &kst; after executing these commands is shown below.
</para>

<para>
<screenshot>
<screeninfo>CallSubs Output</screeninfo>
<mediaobject>
<imageobject>
<imagedata fileref="Screenshot-kst-kscscriptsubroutines.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
</mediaobject>
</screenshot>
</para>

</sect3>
</sect2>

<sect2 id="kstscriptmoreinfo">
<title>More KstScript Documentation</title>
<para>
KstScript is still under development, and not all bindings have been implemented, but most of the basic functionality is present. KstScript development is need driven, and if you would like to see something specific included then a good place to ask is the &kst; development mailing list. <!-- FIXME: reference -->. Documentation of the current KstScript bindings can be found in the <filename>js</filename> folder of the source distribution. <!-- FIXME: really? -->
</para>
</sect2>
</sect1>

</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:0
sgml-indent-data:true
sgml-parent-document:("index.docbook" "book" "chapter")
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
